@page "/"
@using WeatherApp.Models
@using WeatherApp.Services
@inject WeatherService WeatherService
@inject IJSRuntime JS

@* Weather-part *@

<section class="main-part">
    <section class="search-section">
        <h1>Daily Weather Forecast
            <br />
            Update News
        </h1>
        <p class="info-text">
            Get real-time updates on temperature, precipitation,
            <br />
            and other essential weather details to plan your day with confidence.</p>
        <div class="search-container">
            <input id="searchInput" 
                    class="search-input" 
                    type="text" @bind="City" 
                    placeholder="Search for location..." 
                    autofocus="autofocus" />
            <button class="search-button" @onclick="GetWeather">
                🔍
            </button>
        </div>
    </section>
    <section class="weather-container">
        @if (IsLoading)
        {
            <svg class="loading-progress">
                <circle r="40%" cx="50%" cy="50%" />
                <circle r="40%" cx="50%" cy="50%" />
            </svg>
            <div class="loading-progress-text"></div>
        }

        @if (WeatherResponse != null)
        {
            <div class="top-weather">
                <h4>@WeatherResponse.Name</h4>
                <img src="@($"https://openweathermap.org/img/wn/{WeatherResponse.Weather[0].Icon}@2x.png")"
                alt="@WeatherResponse.Weather[0].Description">
            </div>
            <div class="midle-weather">
                <h5 class="date">Today, 
                    @DateTime.Now.ToString("dd MMMM", 
                              new System.Globalization.CultureInfo("en-GB"))</h5>
                <h2 class="temperature">@Math.Round(WeatherResponse.AboutWeather.Temp)°</h2>
                <p class="description">@WeatherResponse.Weather[0].Description.ToUpper()</p>
                <div class="additional-info">
                    <div class="additional-info-container">
                        <div class="start-info">@WeatherResponse.Wind.Speed m/s</div>
                        <div class="separator">|</div>
                        <div class="end-info">Wind</div>
                    </div>
                    <div class="additional-info-container">
                        <div class="start-info">Hum</div>
                        <div class="separator">|</div>
                        <div class="end-info">@WeatherResponse.AboutWeather.Humidity%</div>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(Response))
        {
            <h4>@Response</h4>
        }
    </section>
</section>

@* Forcasted-Part*@

<section class="container-for-weather-details">
    <h2>Hourly Update for the Next 5 Days</h2>
    <p class="details-text">
        The "Hourly Forecast" section provides detailed weather predictions for the next 5 days,
        including hourly updates on temperature, precipitation, wind speed, and more. 
        Stay informed with accurate hourly weather data to plan your day or upcoming days in advance.</p>
    @if (_forecast != null)
    {
        <div class="forecast-container">
            <button class="scroll-btn left" @onclick="ScrollLeft">‹</button>
            <div class="forecast-wrapper" @ref="forecastDiv">
                @foreach (var item in _forecast.List)
                {
                    <div class="forecast-card">
                        <img src="@($"https://openweathermap.org/img/wn/{item.CurrentWeather[0].Icon}@2x.png")"
                             alt="@item.CurrentWeather[0].Name"
                             height="75">
                        <p class="hourly-temp">@Math.Round(item.Main.Temperature)°</p>
                        <p>@item.CurrentWeather[0].Name</p>
                        <hr />
                        <div class="forcasted-card-additional-info">
                            <svg width="15" height="15" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2C8 8 4 10 4 14C4 17.31 6.69 20 10 20C13.31 20 16 17.31 16 14C16 10 12 8 12 2Z" fill="gray" />
                            </svg>  
                            <p>@item.Main.Humidity%</p>
                            <p>|</p>
                            <svg width="15" height="15" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M3 10H14C15.66 10 17 8.66 17 7C17 5.34 15.66 4 14 4C12.9 4 12 4.9 12 6" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                <path d="M3 18H12C13.66 18 15 16.66 15 15C15 13.34 13.66 12 12 12C10.9 12 10 12.9 10 14" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            <p>@item.Wind.Speed m/s</p>
                        </div>
                        <p class="date-time-text">@FormatDateTime(@item.DateTime)</p>
                    </div>
                }
            </div>
            <button class="scroll-btn right" @onclick="ScrollRight">›</button>
        </div>
    }
</section>

@* Weather-Details *@

<section class="container-for-weather-details">
    <h2>Today Weather Details</h2>
    <p class="details-text">
        The "Today Weather Details" section provides a comprehensive overview 
        of the current weather conditions for your selected location.
        Get real-time updates on temperature, humidity, wind speed, and precipitation throughout the day. 
        Stay prepared with accurate weather insights to plan your activities accordingly.
    </p>
</section>


@* 
<p>Sea Level Pressure: @Weather1.AboutWeather.SeaLevelPressure hPa</p>
<p>Visibility: @(Weather1.Visibility.ToString()) km</p>

<p>Wind Gust Speed: @Weather1.Wind.Gust m/s </p>
<p>Wind Direction: @GetWindDirection(Weather1.Wind.Deg) (Weather1.WindInfo.Deg°)</p>
   <p>
                    Sunrise: @ConvertToUniversalTime(Weather1.CurrentSunInfo.Sunrise)
                </p>

                <p>
                    Sunset: @ConvertToUniversalTime(Weather1.CurrentSunInfo.Sunset)
                </p>*@


@code {
    private string City { get; set; } = string.Empty;

    private CurrentWeatherResponse? WeatherResponse { get; set; }

    private string Response { get; set; } = string.Empty;

    private ForecastResponse? _forecast;

    private bool IsLoading { get; set; } = false;

    private ElementReference forecastDiv;


    protected override async Task OnInitializedAsync()
    {
        City = "Rivne";

        await GetWeather(); // Викликаємо метод для отримання погоди при завантаженні сторінки

        City = string.Empty;
    }

    private void ScrollLeft()
    {
        JS.InvokeVoidAsync("scrollForecast", forecastDiv, -400);
    }

    private void ScrollRight()
    {
        JS.InvokeVoidAsync("scrollForecast", forecastDiv, 400);
    }

    private async Task GetWeather()
    {
        if (string.IsNullOrWhiteSpace(City))
        {
            WeatherResponse = null;
            Response = "City cannot be empty!";
            return;
        }

        IsLoading = true;
        WeatherResponse = null;
        Response = string.Empty;

        var errorOrResult = await WeatherService.GetWeatherAsync(City);
        IsLoading = false; // Stop loading after API call

        if (errorOrResult.IsError)
        {
            Response = errorOrResult.FirstError.Code;
            return;
        }

        WeatherResponse = errorOrResult.Value;

        await FetchForecast();
    }


    private async Task FetchForecast()
    {
        var errorOrResult = await WeatherService.GetWeatherForecastAsync(City);

        if (errorOrResult.IsError)
        {
            Response = errorOrResult.FirstError.Code;
            return;
        }

        _forecast = errorOrResult.Value;

    }

    public string GetWindDirection(double windDeg)
    {
        string[] directions = { "N", "NE", "E", "SE", "S", "SW", "W", "NW", "N" };
        int index = (int)Math.Round(windDeg / 45.0) % 8;
        return directions[index];
    }

    public string ConvertToUniversalTime(int time)
    {
        return DateTimeOffset.FromUnixTimeSeconds(time)
                .ToLocalTime().ToString("HH:mm");
    }

    private string FormatDateTime(string itemDateTime)
    {
        if (DateTime.TryParse(itemDateTime, out DateTime parsedDateTime))
        {
            var now = DateTime.Now;

            if (parsedDateTime.Date == now.Date)
            {
                return $"Today {parsedDateTime:hh:mm tt}";
            }
            else if (parsedDateTime.Date == now.AddDays(1).Date)
            {
                return $"Tomorrow {parsedDateTime:hh:mm tt}";
            }
            else
            {
                return parsedDateTime.ToString("dddd hh:mm tt"); // Example: "Monday 09:00 AM"
            }
        }
        else
        {
            return "Invalid Date"; // Or handle the error as needed
        }
    }


}


@* <h4>@Weather1.Name</h4>

<p>Today: @Weather1.Weather[0].Name</p>

<img src="@($"https://openweathermap.org/img/wn/{@Weather1.Weather[0].Icon}@2x.png")"
     alt="@Weather1.Weather[0].Description">

<p>Today: @Weather1.Weather[0].Description</p>

<p>Temperature: @Weather1.AboutWeather.Temp  °C</p>

<p>Feels Like: @Weather1.AboutWeather.FeelsLike  °C</p>

<p>Sea Level Pressure: @Weather1.AboutWeather.SeaLevelPressure hPa</p>

<p>Ground Level Pressure: @Weather1.AboutWeather.GroundLevelPressure hPa</p>

<p>Humidity: @Weather1.AboutWeather.Humidity %</p>

<p>Visibility: @(Weather1.Visibility.ToString()) km</p>

<p>Wind Speed: @Weather1.Wind.Speed m/s </p>

<p>Wind Gust Speed: @Weather1.Wind.Gust m/s </p>

<p>Wind Direction: @GetWindDirection(Weather1.Wind.Deg) (Weather1.WindInfo.Deg°)</p>

<p>
    Sunrise: @ConvertToUniversalTime(Weather1.CurrentSunInfo.Sunrise)
</p>

<p>
    Sunset: @ConvertToUniversalTime(Weather1.CurrentSunInfo.Sunset)
</p> *@